name: Create release

# Triggered when a tag is pushed whose name is a "v" followed by a semantic
# version; for example, "v1.2.3"
on:
  push:
    tags:
      - v*

# Create a release with downloadable binaries for all target platforms.
# The release notes are pulled from the relevant version's section in the
# changelog.
jobs:
  # Create the release
  create-release:
    name:    Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      # Parse changelog
      - name: Get version name from tag
        id:   tag_name
        run:  echo ::set-output name=version::${GITHUB_REF#refs/tags/v}
      - name: Get relevant changelog entry
        id:   changelog
        uses: mindsers/changelog-reader-action@v2
        with:
          version: ${{ steps.tag_name.outputs.version }}
          path:    ./CHANGELOG.md
      - name: Format changelog entry
        id:   format_changelog
        uses: ashley-taylor/regex-property-action@1.2
        with:
          value:       ${{ steps.changelog.outputs.changes }}
          regex:       "([^\n])(?:\n)([^-\n])"
          flags:       g
          replacement: "$1 $2"
      # Create the release
      - name: Create release
        id:   create_release
        uses: actions/create-release@v1
        with:
          tag_name:     ${{ github.ref }}
          release_name: Version ${{ steps.changelog.outputs.version }}
          body:         ${{ steps.format_changelog.outputs.value }}
          draft:        false
          prerelease:   false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Build the program for all target platforms
  build:
    name:  Build
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: ["win-x86", "win-x64", "linux-x64", "osx-x64"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup .NET SDK 6.x
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: 6.0.100
      - name:              Install dependencies
        working-directory: ./MusiqueNonStop
        run:               dotnet restore
      - name:              Build
        working-directory: ./MusiqueNonStop
        run:               >
          dotnet publish
          --configuration Release
          --runtime ${{ matrix.os }}
          --self-contained true
          --no-restore
      - name: Copy output files
        run:  >
          mkdir musique-non-stop-${{ matrix.os }}

          cp -R
          ./MusiqueNonStop/bin/Release/net6.0/${{ matrix.os }}/publish
          musique-non-stop-${{ matrix.os }}/musique-non-stop

          cp
          ./LICENSE.md
          musique-non-stop-${{ matrix.os }}/musique-non-stop/LICENSE.md
      - name: Create zip file
        uses: vimtor/action-zip@v1
        with:
          files:     musique-non-stop-${{ matrix.os }}
          dest:      musique-non-stop-${{ matrix.os }}.zip
          recursive: true
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url:         ${{ needs.create-release.outputs.upload_url }}
          asset_path:         musique-non-stop-${{ matrix.os }}.zip
          asset_name:         musique-non-stop-${{ matrix.os }}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
